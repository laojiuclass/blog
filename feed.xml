<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2020-07-03T13:53:18-05:00</updated><id>/blog/feed.xml</id><title type="html">老九课堂</title><subtitle>一切为了学生</subtitle><entry><title type="html">Fastpages汉化版使用说明</title><link href="/blog/2020/04/14/fastpages%E6%B1%89%E5%8C%96%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html" rel="alternate" type="text/html" title="Fastpages汉化版使用说明" /><published>2020-04-14T00:00:00-05:00</published><updated>2020-04-14T00:00:00-05:00</updated><id>/blog/2020/04/14/fastpages%E6%B1%89%E5%8C%96%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E</id><content type="html" xml:base="/blog/2020/04/14/fastpages%E6%B1%89%E5%8C%96%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html">&lt;p&gt;1 登录自己的github账户，访问：&lt;a href=&quot;https://github.com/EasonQYS/fastpagesJupyter&quot;&gt;https://github.com/EasonQYS/fastpagesJupyter&lt;/a&gt; ，找到下面这个蓝色的字并点击，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image1.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在自己的账户下生成一个仓库（仓库名不能使用&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image2.png&quot; alt=&quot;&quot; /&gt;），用于运行网页。&lt;/p&gt;

&lt;p&gt;2 稍等片刻（约30秒），你的github邮箱会收到一封邮件，指导你接下来的步骤。由于邮件是英文版，请参考README文档。&lt;/p&gt;

&lt;p&gt;操作过程截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image3.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image5.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image6.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击Add key后需要输入github密码。&lt;/p&gt;

&lt;p&gt;3查看Actions，绿色对勾表示初始化完成。（这一步没有意义）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image7.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4在&lt;a href=&quot;https://github.com/EasonQYS/fastpagesJupyter/settings&quot;&gt;https://github.com/EasonQYS/fastpagesJupyter/settings&lt;/a&gt; settings页面下滑找到&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image8.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择master branch，等待&lt;a href=&quot;https://github.com/EasonQYS/fastpagesJupyter/actions&quot;&gt;https://github.com/EasonQYS/fastpagesJupyter/actions&lt;/a&gt; 显示成功。&lt;/p&gt;

&lt;p&gt;5如果运行正常，会生成一个新的branch，名为gh-pages。需要将网页改至该路径。（若干没有，可以先进行后续操作。稍后在回来做这一步）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image9.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，网站已经可以显示了。&lt;/p&gt;

&lt;p&gt;6 修改_config.yml&lt;/p&gt;

&lt;p&gt;为了让页面显示更美观，以及修改超链接为正确内容，我们可能要做一下修改。&lt;/p&gt;

&lt;p&gt;需要修改的部分均已给出中文标注。&lt;/p&gt;

&lt;p&gt;相关修改参考见截图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;若要修改网页标题，则修改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image11.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;若要修改网页内容，则修改index.html文件。&lt;/p&gt;

&lt;p&gt;现在网页正常显示了。&lt;/p&gt;

&lt;p&gt;7 如果没有做第5步，现在做。做完后网站正常显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image12.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8 上传Jupyter文件&lt;/p&gt;

&lt;p&gt;所有ipynb文件都在_notebooks目录下，其中的readme要求命名格式为YYYY-MM-DD-*.ipynb，注意，很容易忘记最后一个破折号。&lt;/p&gt;

&lt;p&gt;但是也有要求，第一个单元格内要以Markdown形式写：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image13.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image14.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;写完上传至_notebooks目录。如果是本地克隆文件夹，那么记得同步至github云端。&lt;/p&gt;

&lt;p&gt;上传之后等待一段时间，即可在博客上看到这篇文章。&lt;/p&gt;

&lt;p&gt;9 类似的，Markdown文件在_posts目录下，也能自动转换。&lt;/p&gt;

&lt;p&gt;同样，有格式要求。（支持中文名）&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image15.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，少一点也行，这是一个例子：&lt;/p&gt;

&lt;p&gt;在_posts目录下创建正确命名的md文档，写入后保存。若在本地写好，记得同步（克隆）至云端。&lt;/p&gt;

&lt;p&gt;-–&lt;/p&gt;

&lt;p&gt;layout: post&lt;/p&gt;

&lt;p&gt;title: “Welcome to Jekyll!”&lt;/p&gt;

&lt;p&gt;-–&lt;/p&gt;

&lt;p&gt;# Welcome&lt;/p&gt;

&lt;p&gt;**Hello world**, this is my first Jekyll blog post.&lt;/p&gt;

&lt;p&gt;I hope you like it!&lt;/p&gt;

&lt;p&gt;10 此外，_docs还能转换docx文件，方法类似。&lt;/p&gt;

&lt;p&gt;将文档上传至/_docs目录下即可。&lt;/p&gt;

&lt;p&gt;11 删帖，删除上述文件即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;遇到的坑：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、md文档可以转博客，但是rst文档好像不行。解决方案，将rst文件重命名时后缀改为md。&lt;/p&gt;

&lt;p&gt;2、若上传多个文档，其中一个报错，同批所有文档都不显示。故每次上传一个文档为佳，利于排查。每个文档生成网页的时间大约在2分钟左右。需要等待至Action成绿色√才表示完成，可以查看网页。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image16.tmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、可加载网页图片，但不能加载本地图片（文档中自带的图片）。例如下图方式添加的图片不能显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-14-fastpages汉化版使用说明/media/image17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">1 登录自己的github账户，访问：https://github.com/EasonQYS/fastpagesJupyter ，找到下面这个蓝色的字并点击，</summary></entry><entry><title type="html">欢迎（ms Word）</title><link href="/blog/2020/04/13/%E6%AC%A2%E8%BF%8E-MS-Word.html" rel="alternate" type="text/html" title="欢迎（ms Word）" /><published>2020-04-13T00:00:00-05:00</published><updated>2020-04-13T00:00:00-05:00</updated><id>/blog/2020/04/13/%E6%AC%A2%E8%BF%8E(MS-Word)</id><content type="html" xml:base="/blog/2020/04/13/%E6%AC%A2%E8%BF%8E-MS-Word.html">&lt;p&gt;欢迎你&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎你&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;欢迎你&lt;/p&gt;

&lt;p&gt;欢迎你&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-04-13-欢迎（MS-Word）/media/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">欢迎你</summary></entry><entry><title type="html">Microsoft Word Example Post</title><link href="/blog/2020/01/01/Microsoft-Word-Example-Post.html" rel="alternate" type="text/html" title="Microsoft Word Example Post" /><published>2020-01-01T00:00:00-06:00</published><updated>2020-01-01T00:00:00-06:00</updated><id>/blog/2020/01/01/Microsoft-Word-Example-Post</id><content type="html" xml:base="/blog/2020/01/01/Microsoft-Word-Example-Post.html">&lt;p&gt;When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”.&lt;/p&gt;

&lt;p&gt;There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://support.office.com/en-us/article/add-alternative-text-to-a-shape-picture-chart-smartart-graphic-or-other-object-44989b2a-903c-4d9a-b742-6a75b451c669&quot;&gt;alt text&lt;/a&gt; in Word documents are not yet supported by fastpages, and will break links to images.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can only specify &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;front matter&lt;/a&gt; for Word documents globally. See &lt;a href=&quot;https://github.com/fastai/fastpages#writing-blog-posts-with-microsoft-word&quot;&gt;the README&lt;/a&gt; for more details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this &lt;a href=&quot;https://www.fast.ai/2020/01/18/gitblog/&quot;&gt;blog post&lt;/a&gt;, which walk you through how to use &lt;a href=&quot;https://pandoc.org/installing.html&quot;&gt;pandoc&lt;/a&gt; to do the conversion. &lt;strong&gt;Note&lt;/strong&gt;: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using &lt;a href=&quot;https://github.com/fastai/fast_template&quot;&gt;fast_template&lt;/a&gt; instead of &lt;strong&gt;fastpages&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The material below is a reproduction of &lt;a href=&quot;https://medium.com/kubeflow/reducing-maintainer-toil-on-kubeflow-with-github-actions-and-machine-learning-f8568374daa1&quot;&gt;this blog post&lt;/a&gt;, and serves as an illustrative example.&lt;/p&gt;

&lt;p&gt;Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues.&lt;/p&gt;

&lt;p&gt;Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-01-01-Microsoft-Word-Example-Post/media/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools.&lt;/p&gt;

&lt;p&gt;Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/2020-01-01-Microsoft-Word-Example-Post/media/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Source: “&lt;a href=&quot;http://bit.ly/tf-github&quot;&gt;&lt;span class=&quot;underline&quot;&gt;TensorFlow World 2019, Automating Your Developer Workflow With ML&lt;/span&gt;&lt;/a&gt;”&lt;/p&gt;

&lt;p&gt;Coincidentally, while building out end to end machine learning &lt;a href=&quot;https://github.com/kubeflow/examples&quot;&gt;&lt;span class=&quot;underline&quot;&gt;examples&lt;/span&gt;&lt;/a&gt; for Kubeflow, we built two examples using publicly available GitHub data: &lt;a href=&quot;https://github.com/kubeflow/examples/tree/master/github_issue_summarization&quot;&gt;&lt;span class=&quot;underline&quot;&gt;GitHub Issue Summarization&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/kubeflow/examples/tree/master/code_search&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Code Search&lt;/span&gt;&lt;/a&gt;. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers.&lt;/p&gt;

&lt;p&gt;This is why we started the project &lt;a href=&quot;https://github.com/kubeflow/code-intelligence&quot;&gt;&lt;span class=&quot;underline&quot;&gt;kubeflow/code-intelligence&lt;/span&gt;&lt;/a&gt;, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/marketplace/issue-label-bot&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Issue Label Bot&lt;/span&gt;&lt;/a&gt;: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The &lt;a href=&quot;https://github.com/machine-learning-apps/Issue-Label-Bot&quot;&gt;&lt;span class=&quot;underline&quot;&gt;current version&lt;/span&gt;&lt;/a&gt; of this bot only applies a very limited set of labels, however we are currently &lt;a href=&quot;https://twimlai.com/twiml-talk-313-machine-learning-at-github-with-omoju-miller/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;A/B testing new models&lt;/span&gt;&lt;/a&gt; that allow personalized labels. Here is a &lt;a href=&quot;https://towardsdatascience.com/mlapp-419f90e8f007&quot;&gt;&lt;span class=&quot;underline&quot;&gt;blog post&lt;/span&gt;&lt;/a&gt; discussing this project in more detail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/code-intelligence/tree/master/Issue_Triage/action&quot;&gt;&lt;span class=&quot;underline&quot;&gt;Issue Triage GitHub Action&lt;/span&gt;&lt;/a&gt;: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/tree/master/Issue_Embeddings&quot;&gt;&lt;span class=&quot;underline&quot;&gt;using features extracted by ML&lt;/span&gt;&lt;/a&gt; to automate more steps in the triage process to further reduce toil.&lt;/p&gt;

&lt;h2 id=&quot;building-solutions-with-github-actions&quot;&gt;Building Solutions with GitHub Actions&lt;/h2&gt;

&lt;p&gt;One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted.&lt;/p&gt;

&lt;p&gt;We are really excited by GitHub’s newly released feature &lt;a href=&quot;https://github.com/features/actions&quot;&gt;&lt;span class=&quot;underline&quot;&gt;GitHub Actions&lt;/span&gt;&lt;/a&gt; because we think it will make integrating ML with GitHub much easier.&lt;/p&gt;

&lt;p&gt;For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app.&lt;/p&gt;

&lt;p&gt;To automate adding/removing issues needing triage to a Kanban board we wrote a simple &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/py/issue_triage/triage.py&quot;&gt;&lt;span class=&quot;underline&quot;&gt;python&lt;/span&gt;&lt;/a&gt; script that interfaces with GitHub’s &lt;a href=&quot;https://developer.github.com/v4/&quot;&gt;&lt;span class=&quot;underline&quot;&gt;GraphQL API&lt;/span&gt;&lt;/a&gt; to modify issues.&lt;/p&gt;

&lt;p&gt;As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created &lt;a href=&quot;https://github.com/marketplace?utf8=%E2%9C%93&amp;amp;type=actions&amp;amp;query=argo&quot;&gt;&lt;span class=&quot;underline&quot;&gt;GitHub Actions to launch Argo Workflows&lt;/span&gt;&lt;/a&gt;. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Call To Action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Help us create reports that pull and visualize key performance indicators (KPI). &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/issues/71&quot;&gt;&lt;span class=&quot;underline&quot;&gt;https://github.com/kubeflow/code-intelligence/issues/71&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;We have defined our KPI here: &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/issues/19&quot;&gt;&lt;span class=&quot;underline&quot;&gt;issue #19&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Combine repo specific and non-repo specific label predictions: &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/issues/70&quot;&gt;&lt;span class=&quot;underline&quot;&gt;https://github.com/kubeflow/code-intelligence/issues/70&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the aforementioned issues we welcome contributions for these &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/issues&quot;&gt;&lt;span class=&quot;underline&quot;&gt;other issues&lt;/span&gt;&lt;/a&gt; in our repo.&lt;/p&gt;</content><author><name></name></author><summary type="html">When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”.</summary></entry></feed>